SE_Alpha_varE.df <- data.frame(HH = SE_Alpha_varE_HH[,1],
EM = SE_Alpha_varE_EM[,1],
EX = SE_Alpha_varE_EX[,1],
AG = SE_Alpha_varE_AG[,1],
CO = SE_Alpha_varE_CO[,1],
OX = SE_Alpha_varE_OX[,1])
write.csv(SE_Alpha_varE.df, here("Reliability Estimates/BootstrappedSE_E_Alpha.csv"))
bmean_Alpha_varE.df <- data.frame(HH = SE_Alpha_varE_HH[,2],
EM = SE_Alpha_varE_EM[,2],
EX = SE_Alpha_varE_EX[,2],
AG = SE_Alpha_varE_AG[,2],
CO = SE_Alpha_varE_CO[,2],
OX = SE_Alpha_varE_OX[,2])
write.csv(bmean_Alpha_varE.df, here("Reliability Estimates/Bootstrappedmeanvar_E_Alpha.csv"))
SE_Alpha_varE.df <- read.csv(here("Reliability Estimates/BootstrappedSE_E_Alpha.csv"))
rma.varE_Alpha_HH.fit <- rma(measure = "GEN", yi = (Reg_prep$var_hh - AlphaHex_HH$reliability * Reg_prep$var_hh), sei = SE_Alpha_varE_HH[,1], method = "REML")
rma.varE_Alpha_EM.fit <- rma(measure = "GEN", yi = (Reg_prep$var_em - AlphaHex_EM$reliability * Reg_prep$var_em), sei = SE_Alpha_varE_EM[,1], method = "REML")
rma.varE_Alpha_EX.fit <- rma(measure = "GEN", yi = (Reg_prep$var_ex - AlphaHex_EX$reliability * Reg_prep$var_ex), sei = SE_Alpha_varE_EX[,1], method = "REML")
rma.varE_Alpha_AG.fit <- rma(measure = "GEN", yi = (Reg_prep$var_ag - AlphaHex_AG$reliability * Reg_prep$var_ag), sei = SE_Alpha_varE_AG[,1], method = "REML")
rma.varE_Alpha_CO.fit <- rma(measure = "GEN", yi = (Reg_prep$var_co - AlphaHex_CO$reliability * Reg_prep$var_co), sei = SE_Alpha_varE_CO[,1], method = "REML")
rma.varE_Alpha_OX.fit <- rma(measure = "GEN", yi = (Reg_prep$var_ox - AlphaHex_OX$reliability * Reg_prep$var_ox), sei = SE_Alpha_varE_OX[,1], method = "REML")
bmean_Alpha_varE.df
SE_Alpha_varE.df
# takes a while: on my machine
SE_Alpha_varT_HH <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_HH]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
}) %>%
t()
SE_Alpha_varT_EM <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_EM]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
})%>%
t()
SE_Alpha_varT_EX <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_EX]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
})%>%
t()
SE_Alpha_varT_AG <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_AG]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
})%>%
t()
SE_Alpha_varT_CO <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_CO]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
})%>%
t()
SE_Alpha_varT_OX <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_OX]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
})%>%
t()
SE_Alpha_varT.df <- data.frame(HH = SE_Alpha_varT_HH[,1],
EM = SE_Alpha_varT_EM[,1],
EX = SE_Alpha_varT_EX[,1],
AG = SE_Alpha_varT_AG[,1],
CO = SE_Alpha_varT_CO[,1],
OX = SE_Alpha_varT_OX[,1])
bmean_Alpha_varT.df <- data.frame(HH = SE_Alpha_varT_HH[,2],
EM = SE_Alpha_varT_EM[,2],
EX = SE_Alpha_varT_EX[,2],
AG = SE_Alpha_varT_AG[,2],
CO = SE_Alpha_varT_CO[,2],
OX = SE_Alpha_varT_OX[,2])
write.csv(SE_Alpha_varT.df, here("Reliability Estimates/BootstrappedSE_T_Alpha.csv"), row.names = FALSE)
write.csv(bmean_Alpha_varT.df, here("Reliability Estimates/Bootstrappedmeanvar_T_Alpha.csv"), row.names = FALSE)
rma.varT_Alpha_HH.fit <- rma(measure = "GEN", yi = (AlphaHex_HH$reliability * Reg_prep$var_hh), sei = SE_Alpha_varT_HH[,1], method = "REML")
rma.varT_Alpha_EM.fit <- rma(measure = "GEN", yi = (AlphaHex_EM$reliability * Reg_prep$var_em), sei = SE_Alpha_varT_EM[,1], method = "REML")
rma.varT_Alpha_EX.fit <- rma(measure = "GEN", yi = (AlphaHex_EX$reliability * Reg_prep$var_ex), sei = SE_Alpha_varT_EX[,1], method = "REML")
rma.varT_Alpha_AG.fit <- rma(measure = "GEN", yi = (AlphaHex_AG$reliability * Reg_prep$var_ag), sei = SE_Alpha_varT_AG[,1], method = "REML")
rma.varT_Alpha_CO.fit <- rma(measure = "GEN", yi = (AlphaHex_CO$reliability * Reg_prep$var_co), sei = SE_Alpha_varT_CO[,1], method = "REML")
rma.varT_Alpha_OX.fit <- rma(measure = "GEN", yi = (AlphaHex_OX$reliability * Reg_prep$var_ox), sei = SE_Alpha_varT_OX[,1], method = "REML")
SE_Alpha_varT.df <- read.csv(here("Reliability Estimates/BootstrappedSE_T_Alpha.csv"))
SE_Alpha_varE_HH <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_HH]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE_EM <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_EM]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE_EX <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_EX]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE_AG <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_AG]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE_CO <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_CO]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE_OX <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_OX]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE.df <- data.frame(HH = SE_Alpha_varE_HH[,1],
EM = SE_Alpha_varE_EM[,1],
EX = SE_Alpha_varE_EX[,1],
AG = SE_Alpha_varE_AG[,1],
CO = SE_Alpha_varE_CO[,1],
OX = SE_Alpha_varE_OX[,1])
write.csv(SE_Alpha_varE.df, here("Reliability Estimates/BootstrappedSE_E_Alpha.csv"), row.names = FALSE)
bmean_Alpha_varE.df <- data.frame(HH = SE_Alpha_varE_HH[,2],
EM = SE_Alpha_varE_EM[,2],
EX = SE_Alpha_varE_EX[,2],
AG = SE_Alpha_varE_AG[,2],
CO = SE_Alpha_varE_CO[,2],
OX = SE_Alpha_varE_OX[,2])
write.csv(bmean_Alpha_varE.df, here("Reliability Estimates/Bootstrappedmeanvar_E_Alpha.csv"), row.names = FALSE)
pdf(here("Graphics/RMA_varEvarT.pdf"))
pT_Alpha_HH <- my_forest_plot(rma.varT_Alpha_HH.fit, AlphaHex_HH, main.title = paste0("Forest Plot - HEXACO HH --- I2: ", round(rma.varT_Alpha_HH.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_HH <- my_forest_plot(rma.varE_Alpha_HH.fit, AlphaHex_HH, main.title = paste0("Forest Plot - HEXACO HH --- I2: ", round(rma.varE_Alpha_HH.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_HH, pE_Alpha_HH)
pT_Alpha_EM <- my_forest_plot(rma.varT_Alpha_EM.fit, AlphaHex_EM, main.title = paste0("Forest Plot - HEXACO EM --- I2: ", round(rma.varT_Alpha_EM.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_EM <- my_forest_plot(rma.varE_Alpha_EM.fit, AlphaHex_EM, main.title = paste0("Forest Plot - HEXACO EM --- I2: ", round(rma.varE_Alpha_EM.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_EM, pE_Alpha_EM)
pT_Alpha_EX <- my_forest_plot(rma.varT_Alpha_EX.fit, AlphaHex_EX, main.title = paste0("Forest Plot - HEXACO EX --- I2: ", round(rma.varT_Alpha_EX.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_EX <- my_forest_plot(rma.varE_Alpha_EX.fit, AlphaHex_EX, main.title = paste0("Forest Plot - HEXACO EX --- I2: ", round(rma.varE_Alpha_EX.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_EX, pE_Alpha_EX)
pT_Alpha_AG <- my_forest_plot(rma.varT_Alpha_AG.fit, AlphaHex_AG, main.title = paste0("Forest Plot - HEXACO AG --- I2: ", round(rma.varT_Alpha_AG.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_AG <- my_forest_plot(rma.varE_Alpha_AG.fit, AlphaHex_AG, main.title = paste0("Forest Plot - HEXACO AG --- I2: ", round(rma.varE_Alpha_AG.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_AG, pE_Alpha_AG)
pT_Alpha_CO <- my_forest_plot(rma.varT_Alpha_CO.fit, AlphaHex_CO, main.title = paste0("Forest Plot - HEXACO CO --- I2: ", round(rma.varT_Alpha_CO.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_CO <- my_forest_plot(rma.varE_Alpha_CO.fit, AlphaHex_CO, main.title = paste0("Forest Plot - HEXACO CO --- I2: ", round(rma.varE_Alpha_CO.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_CO, pE_Alpha_CO)
pT_Alpha_OX <- my_forest_plot(rma.varT_Alpha_OX.fit, AlphaHex_OX, main.title = paste0("Forest Plot - HEXACO OX --- I2: ", round(rma.varT_Alpha_OX.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_OX <- my_forest_plot(rma.varE_Alpha_OX.fit, AlphaHex_OX, main.title = paste0("Forest Plot - HEXACO OX --- I2: ", round(rma.varE_Alpha_OX.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_OX, pE_Alpha_OX)
dev.off()
here()
pdf("C:/Users/beinhaul/Documents/GitHub/rxx-generalization/Graphics/RMA_varEvarT")
pT_Alpha_HH <- my_forest_plot(rma.varT_Alpha_HH.fit, AlphaHex_HH, main.title = paste0("Forest Plot - HEXACO HH --- I2: ", round(rma.varT_Alpha_HH.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_HH <- my_forest_plot(rma.varE_Alpha_HH.fit, AlphaHex_HH, main.title = paste0("Forest Plot - HEXACO HH --- I2: ", round(rma.varE_Alpha_HH.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_HH, pE_Alpha_HH)
pT_Alpha_EM <- my_forest_plot(rma.varT_Alpha_EM.fit, AlphaHex_EM, main.title = paste0("Forest Plot - HEXACO EM --- I2: ", round(rma.varT_Alpha_EM.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_EM <- my_forest_plot(rma.varE_Alpha_EM.fit, AlphaHex_EM, main.title = paste0("Forest Plot - HEXACO EM --- I2: ", round(rma.varE_Alpha_EM.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_EM, pE_Alpha_EM)
pT_Alpha_EX <- my_forest_plot(rma.varT_Alpha_EX.fit, AlphaHex_EX, main.title = paste0("Forest Plot - HEXACO EX --- I2: ", round(rma.varT_Alpha_EX.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_EX <- my_forest_plot(rma.varE_Alpha_EX.fit, AlphaHex_EX, main.title = paste0("Forest Plot - HEXACO EX --- I2: ", round(rma.varE_Alpha_EX.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_EX, pE_Alpha_EX)
pT_Alpha_AG <- my_forest_plot(rma.varT_Alpha_AG.fit, AlphaHex_AG, main.title = paste0("Forest Plot - HEXACO AG --- I2: ", round(rma.varT_Alpha_AG.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_AG <- my_forest_plot(rma.varE_Alpha_AG.fit, AlphaHex_AG, main.title = paste0("Forest Plot - HEXACO AG --- I2: ", round(rma.varE_Alpha_AG.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_AG, pE_Alpha_AG)
pT_Alpha_CO <- my_forest_plot(rma.varT_Alpha_CO.fit, AlphaHex_CO, main.title = paste0("Forest Plot - HEXACO CO --- I2: ", round(rma.varT_Alpha_CO.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_CO <- my_forest_plot(rma.varE_Alpha_CO.fit, AlphaHex_CO, main.title = paste0("Forest Plot - HEXACO CO --- I2: ", round(rma.varE_Alpha_CO.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_CO, pE_Alpha_CO)
pT_Alpha_OX <- my_forest_plot(rma.varT_Alpha_OX.fit, AlphaHex_OX, main.title = paste0("Forest Plot - HEXACO OX --- I2: ", round(rma.varT_Alpha_OX.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_OX <- my_forest_plot(rma.varE_Alpha_OX.fit, AlphaHex_OX, main.title = paste0("Forest Plot - HEXACO OX --- I2: ", round(rma.varE_Alpha_OX.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_OX, pE_Alpha_OX)
dev.off()
pdf("C:/Users/beinhaul/Documents/GitHub/rxx-generalization/Graphics/RMA_varEvarT.pdf")
pT_Alpha_HH <- my_forest_plot(rma.varT_Alpha_HH.fit, AlphaHex_HH, main.title = paste0("Forest Plot - HEXACO HH --- I2: ", round(rma.varT_Alpha_HH.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_HH <- my_forest_plot(rma.varE_Alpha_HH.fit, AlphaHex_HH, main.title = paste0("Forest Plot - HEXACO HH --- I2: ", round(rma.varE_Alpha_HH.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_HH, pE_Alpha_HH)
pT_Alpha_EM <- my_forest_plot(rma.varT_Alpha_EM.fit, AlphaHex_EM, main.title = paste0("Forest Plot - HEXACO EM --- I2: ", round(rma.varT_Alpha_EM.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_EM <- my_forest_plot(rma.varE_Alpha_EM.fit, AlphaHex_EM, main.title = paste0("Forest Plot - HEXACO EM --- I2: ", round(rma.varE_Alpha_EM.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_EM, pE_Alpha_EM)
pT_Alpha_EX <- my_forest_plot(rma.varT_Alpha_EX.fit, AlphaHex_EX, main.title = paste0("Forest Plot - HEXACO EX --- I2: ", round(rma.varT_Alpha_EX.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_EX <- my_forest_plot(rma.varE_Alpha_EX.fit, AlphaHex_EX, main.title = paste0("Forest Plot - HEXACO EX --- I2: ", round(rma.varE_Alpha_EX.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_EX, pE_Alpha_EX)
pT_Alpha_AG <- my_forest_plot(rma.varT_Alpha_AG.fit, AlphaHex_AG, main.title = paste0("Forest Plot - HEXACO AG --- I2: ", round(rma.varT_Alpha_AG.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_AG <- my_forest_plot(rma.varE_Alpha_AG.fit, AlphaHex_AG, main.title = paste0("Forest Plot - HEXACO AG --- I2: ", round(rma.varE_Alpha_AG.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_AG, pE_Alpha_AG)
pT_Alpha_CO <- my_forest_plot(rma.varT_Alpha_CO.fit, AlphaHex_CO, main.title = paste0("Forest Plot - HEXACO CO --- I2: ", round(rma.varT_Alpha_CO.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_CO <- my_forest_plot(rma.varE_Alpha_CO.fit, AlphaHex_CO, main.title = paste0("Forest Plot - HEXACO CO --- I2: ", round(rma.varE_Alpha_CO.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_CO, pE_Alpha_CO)
pT_Alpha_OX <- my_forest_plot(rma.varT_Alpha_OX.fit, AlphaHex_OX, main.title = paste0("Forest Plot - HEXACO OX --- I2: ", round(rma.varT_Alpha_OX.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_OX <- my_forest_plot(rma.varE_Alpha_OX.fit, AlphaHex_OX, main.title = paste0("Forest Plot - HEXACO OX --- I2: ", round(rma.varE_Alpha_OX.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_OX, pE_Alpha_OX)
dev.off()
plot(bmean_Alpha_varE.df[,1], AlphaHex_HH$reliability)
plot(bmean_Alpha_varT.df[,1], AlphaHex_HH$reliability * Reg_prep$var_hh)
plot(bmean_Alpha_varT.df[,2], AlphaHex_EM$reliability * Reg_prep$var_em)
plot(bmean_Alpha_varT.df[,3], AlphaHex_EX$reliability * Reg_prep$var_ex)
plot(bmean_Alpha_varT.df[,4], AlphaHex_AG$reliability * Reg_prep$var_ag)
plot(bmean_Alpha_varT.df[,5], AlphaHex_CO$reliability * Reg_prep$var_co)
plot(bmean_Alpha_varT.df[,6], AlphaHex_OX$reliability * Reg_prep$var_ox)
plot(bmean_Alpha_varE.df[,1], Reg_prep$var_hh - AlphaHex_HH$reliability * Reg_prep$var_hh)
plot(bmean_Alpha_varE.df[,2], Reg_prep$var_em - AlphaHex_EM$reliability * Reg_prep$var_em)
plot(bmean_Alpha_varE.df[,3], Reg_prep$var_ex - AlphaHex_EX$reliability * Reg_prep$var_ex)
plot(bmean_Alpha_varE.df[,4], Reg_prep$var_ag - AlphaHex_AG$reliability * Reg_prep$var_ag)
plot(bmean_Alpha_varE.df[,5], Reg_prep$var_co - AlphaHex_CO$reliability * Reg_prep$var_co)
plot(bmean_Alpha_varE.df[,6], Reg_prep$var_ox - AlphaHex_OX$reliability * Reg_prep$var_ox)
bmean_Alpha_varE.df
SE_Alpha_varE_HH
SE_Alpha_varE_EM
Reg_prep$var_hh - AlphaHex_HH$reliability * Reg_prep$var_hh
bmean_Alpha_varE.df[,1]
bmean_Alpha_varE.df
bootstrap_SE_varE <- function(data, indices, stat = "ALPHA"){
d <- data[indices,]
if(stat == "ALPHA"){
alpha_fit <- psych::alpha(d, warnings = FALSE)
alpha <- alpha_fit$total[1]
rel <- alpha
}
if(stat == "OMEGA"){
omega_fit <- coefficientalpha::omega(d, se = F, varphi = 0, test = F)
omega <- omega_fit$omega
rel <- omega
}
var_X <- var(rowMeans(d, na.rm = T), na.rm = T)
var_T <- as.numeric(rel * var_X)
var_E <- var_X - var_T
return(var_E)
}
SE_Alpha_varE_HH <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_HH]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
rma.varE_Alpha_HH.fit <- rma(measure = "GEN", yi = (Reg_prep$var_hh - AlphaHex_HH$reliability * Reg_prep$var_hh), sei = SE_Alpha_varE_HH[,1], method = "REML")
rma.varE_Alpha_HH.fit
pT_Alpha_HH <- my_forest_plot(rma.varT_Alpha_HH.fit, AlphaHex_HH, main.title = paste0("Forest Plot - HEXACO HH --- I2: ", round(rma.varT_Alpha_HH.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_HH <- my_forest_plot(rma.varE_Alpha_HH.fit, AlphaHex_HH, main.title = paste0("Forest Plot - HEXACO HH --- I2: ", round(rma.varE_Alpha_HH.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_HH, pE_Alpha_HH)
plot(SE_Alpha_varT_HH[,1], SE_Alpha_varE_HH[,1])
SE_Alpha_varE_HH[,1]
SE_Alpha_varT_HH[,1]
### Reliability Generalization HEXACO - Analysis of Error & True Variance ###
## 18/05/2022
###################################################################################################
# This script is used for meta-analysis of the reliability estimates generated previously.        #
###################################################################################################
# library loading and installing as necessary
# relevant R packages
packages <- c("metafor", "tidyverse", "here", "data.table", "lavaan", "boot")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("ReliabilityFunctions_RG.R"))
# only run if you wish to recompute the reliability estimates!
# source(here("Generalization_Initialization_HEXACO.R"))
source(here("Loading_Estimates_HEXACO.R"))
Reg_prep <- read.csv(here("Meta-Regression/meta_regression_dat_HEXACO.csv"))
### HEXACO ###
### RRR10 cheating Priming - (Mazar, Amir & Ariely, 2008)
# Thankfully, for the RRR10 project, the data can be taken from a file directly:
pc_df <- as.data.frame(fread(here("Data/RRR10/raw_data_corrected_MAA.csv")))
# data <- data[which(data$age >= 18 & data$age <= 25),]
# retain observations only for participants eligible for analysis
pc_df <- pc_df[which(pc_df$inclusion == "inclusion both RRR" | pc_df$inclusion == "inclusion Mazar only"),] %>%
mutate(source = lab.name)
pc_df$source[which(pc_df$source == unique(pc_df$source)[8])] <- "Gonzalez-Iraizoz"
pc_df$source[which(pc_df$source == unique(pc_df$source)[16])] <- "Ozdogru"
# identify relevant labs for analsysis
labs_in_paper <- c("Laine", "klein Selle & Rozmann", "Aczel", "Ferreira-Santos", "Meijer", "Loschelder", "Wick", "Suchotzki",
"Sutan", "Vanpaemel", "Verschuere", "Wiggins", "Gonzalez-Iraizoz", "Koppel", "Birt", "McCarthy", "Evans",
"Holzmeister", "Ozdogru")
labs_in_data <- unique(pc_df$source)
# labs_in_data[8] <- "Gonzalez-Iraizoz"
# labs_in_data[16] <- "Ozdogru"
# remove labs from data, which we do not need for analysis
labs_excl <- labs_in_data[!labs_in_data %in% labs_in_paper]
pc_df <- pc_df[which(!pc_df$source %in% labs_excl),]
# include only participants in cheat condition (design was 2x2, cheat - no cheat x commandment - books)
pc_df <- pc_df[which(pc_df$maz.cheat.cond == "cheat"),]
names(pc_df)
# retain only those columns, which are needed for subsequent analysis.
pc_df <- pc_df[,c(which(names(pc_df) %in% c("inclusion", "maz.prime.cond", "maz.cheat.cond", "source",
"compensation", "language", "major", "gender", "age")),
grep("^hex", names(pc_df)))]
# recoding the hexaco items, that need recoding
for(i in grep("^hex", names(pc_df))){
pc_df[,i] <- as.integer(pc_df[,i])
}
# these are the numbers of the items, that need recoding
items_hex_recode <- c(30, 12, 60, 42, 24, 28, 53, 35, 41, 59, 28, 52, 10, 46, 9, 15, 57, 21, 26, 32, 14, 20, 44, 56, 1, 31, 49, 19, 55, 48)
names_items_hex_recode <- paste0("hex", items_hex_recode) # pasting "hex" and number gives the column names
names_items_hex_recode_R <- paste0(names_items_hex_recode, "_R") # adding _R for names of items, that are recoded
pc_df[,names_items_hex_recode_R] <- 6 - pc_df[,names_items_hex_recode] # recode items that need recoding
# identifying items for specific scales
# Honesty-Humility
items_hex_HH <- c(6, 30, 54, 12, 36, 60, 18, 42, 24, 48) # items in Honesty-Humility subscale
names_items_hex_HH <- ifelse(items_hex_HH %in% items_hex_recode, paste0("hex", items_hex_HH, "_R"), paste0("hex",items_hex_HH)) # did item need recoding?
pc_hex_items_HH <- which(names(pc_df) %in% names_items_hex_HH) # select all items from honesty-humility subscale, correctly coded
# Emotionality
items_hex_EM <- c(5, 29, 53, 11, 35, 17, 41, 23, 47, 59) # items in Emotionality subscale
names_items_hex_EM <- ifelse(items_hex_EM %in% items_hex_recode, paste0("hex", items_hex_EM, "_R"), paste0("hex",items_hex_EM)) # did item need recoding?
pc_hex_items_EM <- which(names(pc_df) %in% names_items_hex_EM) # select all items from Emotionality subscale, correctly coded
#Extraversion
items_hex_EX <- c(4, 28, 52, 10, 34, 58, 16, 40, 22, 46) # items in Extraversion subscale
names_items_hex_EX <- ifelse(items_hex_EX %in% items_hex_recode, paste0("hex", items_hex_EX, "_R"), paste0("hex",items_hex_EX)) # did item need recoding?
pc_hex_items_EX <- which(names(pc_df) %in% names_items_hex_EX) # select all items from Extraversion subscale, correctly coded
#Agreeableness
items_hex_AG <- c(3, 27, 9, 33, 51, 15, 39, 57, 21, 45) # items in Agreeableness subscale
names_items_hex_AG <- ifelse(items_hex_AG %in% items_hex_recode, paste0("hex", items_hex_AG, "_R"), paste0("hex",items_hex_AG)) # did item need recoding?
pc_hex_items_AG <- which(names(pc_df) %in% names_items_hex_AG) # select all items from Agreeableness subscale, correctly coded
#Conscientiousness
items_hex_CO <- c(2, 26, 8, 32, 14, 38, 50, 20, 44, 56) # items in Conscientiousness subscale
names_items_hex_CO <- ifelse(items_hex_CO %in% items_hex_recode, paste0("hex", items_hex_CO, "_R"), paste0("hex",items_hex_CO)) # did item need recoding?
pc_hex_items_CO <- which(names(pc_df) %in% names_items_hex_CO) # select all items from Conscientiousness subscale, correctly coded
#Openness to Experience
items_hex_OX <- c(1, 25, 7, 31, 13, 37, 49, 19, 43, 55) # items in Openness to Experience subscale
names_items_hex_OX <- ifelse(items_hex_OX %in% items_hex_recode, paste0("hex", items_hex_OX, "_R"), paste0("hex",items_hex_OX)) # did item need recoding?
pc_hex_items_OX <- which(names(pc_df) %in% names_items_hex_OX) # select all items from Openness to Experience subscale, correctly coded
# takes a while: on my machine
SE_Alpha_varT_HH <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_HH]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
}) %>%
t()
SE_Alpha_varT_EM <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_EM]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
})%>%
t()
SE_Alpha_varT_EX <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_EX]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
})%>%
t()
SE_Alpha_varT_AG <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_AG]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
})%>%
t()
SE_Alpha_varT_CO <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_CO]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
})%>%
t()
SE_Alpha_varT_OX <- sapply(unique(pc_df$source), FUN = function(x){
bvarTs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_OX]),
statistic = bootstrap_SE_varT,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarTs$t), mean(bvarTs$t)))
})%>%
t()
SE_Alpha_varT.df <- data.frame(HH = SE_Alpha_varT_HH[,1],
EM = SE_Alpha_varT_EM[,1],
EX = SE_Alpha_varT_EX[,1],
AG = SE_Alpha_varT_AG[,1],
CO = SE_Alpha_varT_CO[,1],
OX = SE_Alpha_varT_OX[,1])
bmean_Alpha_varT.df <- data.frame(HH = SE_Alpha_varT_HH[,2],
EM = SE_Alpha_varT_EM[,2],
EX = SE_Alpha_varT_EX[,2],
AG = SE_Alpha_varT_AG[,2],
CO = SE_Alpha_varT_CO[,2],
OX = SE_Alpha_varT_OX[,2])
write.csv(SE_Alpha_varT.df, here("Reliability Estimates/BootstrappedSE_T_Alpha.csv"), row.names = FALSE)
write.csv(bmean_Alpha_varT.df, here("Reliability Estimates/Bootstrappedmeanvar_T_Alpha.csv"), row.names = FALSE)
rma.varT_Alpha_HH.fit <- rma(measure = "GEN", yi = (AlphaHex_HH$reliability * Reg_prep$var_hh), sei = SE_Alpha_varT_HH[,1], method = "REML")
rma.varT_Alpha_EM.fit <- rma(measure = "GEN", yi = (AlphaHex_EM$reliability * Reg_prep$var_em), sei = SE_Alpha_varT_EM[,1], method = "REML")
rma.varT_Alpha_EX.fit <- rma(measure = "GEN", yi = (AlphaHex_EX$reliability * Reg_prep$var_ex), sei = SE_Alpha_varT_EX[,1], method = "REML")
rma.varT_Alpha_AG.fit <- rma(measure = "GEN", yi = (AlphaHex_AG$reliability * Reg_prep$var_ag), sei = SE_Alpha_varT_AG[,1], method = "REML")
rma.varT_Alpha_CO.fit <- rma(measure = "GEN", yi = (AlphaHex_CO$reliability * Reg_prep$var_co), sei = SE_Alpha_varT_CO[,1], method = "REML")
rma.varT_Alpha_OX.fit <- rma(measure = "GEN", yi = (AlphaHex_OX$reliability * Reg_prep$var_ox), sei = SE_Alpha_varT_OX[,1], method = "REML")
SE_Alpha_varT.df <- read.csv(here("Reliability Estimates/BootstrappedSE_T_Alpha.csv"))
SE_Alpha_varE_HH <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_HH]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE_EM <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_EM]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE_EX <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_EX]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE_AG <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_AG]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE_CO <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_CO]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE_OX <- sapply(unique(pc_df$source), FUN = function(x){
bvarEs <- boot(data = as.matrix(pc_df[pc_df$source == x, names_items_hex_OX]),
statistic = bootstrap_SE_varE,
stat = "ALPHA",
R = 1000)
return(c(sd(bvarEs$t), mean(bvarEs$t)))
})%>%
t()
SE_Alpha_varE.df <- data.frame(HH = SE_Alpha_varE_HH[,1],
EM = SE_Alpha_varE_EM[,1],
EX = SE_Alpha_varE_EX[,1],
AG = SE_Alpha_varE_AG[,1],
CO = SE_Alpha_varE_CO[,1],
OX = SE_Alpha_varE_OX[,1])
write.csv(SE_Alpha_varE.df, here("Reliability Estimates/BootstrappedSE_E_Alpha.csv"), row.names = FALSE)
bmean_Alpha_varE.df <- data.frame(HH = SE_Alpha_varE_HH[,2],
EM = SE_Alpha_varE_EM[,2],
EX = SE_Alpha_varE_EX[,2],
AG = SE_Alpha_varE_AG[,2],
CO = SE_Alpha_varE_CO[,2],
OX = SE_Alpha_varE_OX[,2])
write.csv(bmean_Alpha_varE.df, here("Reliability Estimates/Bootstrappedmeanvar_E_Alpha.csv"), row.names = FALSE)
SE_Alpha_varE.df <- read.csv(here("Reliability Estimates/BootstrappedSE_E_Alpha.csv"))
rma.varE_Alpha_HH.fit <- rma(measure = "GEN", yi = (Reg_prep$var_hh - AlphaHex_HH$reliability * Reg_prep$var_hh), sei = SE_Alpha_varE_HH[,1], method = "REML")
rma.varE_Alpha_EM.fit <- rma(measure = "GEN", yi = (Reg_prep$var_em - AlphaHex_EM$reliability * Reg_prep$var_em), sei = SE_Alpha_varE_EM[,1], method = "REML")
rma.varE_Alpha_EX.fit <- rma(measure = "GEN", yi = (Reg_prep$var_ex - AlphaHex_EX$reliability * Reg_prep$var_ex), sei = SE_Alpha_varE_EX[,1], method = "REML")
rma.varE_Alpha_AG.fit <- rma(measure = "GEN", yi = (Reg_prep$var_ag - AlphaHex_AG$reliability * Reg_prep$var_ag), sei = SE_Alpha_varE_AG[,1], method = "REML")
rma.varE_Alpha_CO.fit <- rma(measure = "GEN", yi = (Reg_prep$var_co - AlphaHex_CO$reliability * Reg_prep$var_co), sei = SE_Alpha_varE_CO[,1], method = "REML")
rma.varE_Alpha_OX.fit <- rma(measure = "GEN", yi = (Reg_prep$var_ox - AlphaHex_OX$reliability * Reg_prep$var_ox), sei = SE_Alpha_varE_OX[,1], method = "REML")
pdf("C:/Users/beinhaul/Documents/GitHub/rxx-generalization/Graphics/RMA_varEvarT.pdf")
pdf("C:/Users/beinhaul/Documents/GitHub/rxx-generalization/Graphics/RMA_varEvarT.pdf")
pT_Alpha_HH <- my_forest_plot(rma.varT_Alpha_HH.fit, AlphaHex_HH, main.title = paste0("Forest Plot - HEXACO HH --- I2: ", round(rma.varT_Alpha_HH.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_HH <- my_forest_plot(rma.varE_Alpha_HH.fit, AlphaHex_HH, main.title = paste0("Forest Plot - HEXACO HH --- I2: ", round(rma.varE_Alpha_HH.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_HH, pE_Alpha_HH)
pT_Alpha_EM <- my_forest_plot(rma.varT_Alpha_EM.fit, AlphaHex_EM, main.title = paste0("Forest Plot - HEXACO EM --- I2: ", round(rma.varT_Alpha_EM.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_EM <- my_forest_plot(rma.varE_Alpha_EM.fit, AlphaHex_EM, main.title = paste0("Forest Plot - HEXACO EM --- I2: ", round(rma.varE_Alpha_EM.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_EM, pE_Alpha_EM)
pT_Alpha_EX <- my_forest_plot(rma.varT_Alpha_EX.fit, AlphaHex_EX, main.title = paste0("Forest Plot - HEXACO EX --- I2: ", round(rma.varT_Alpha_EX.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_EX <- my_forest_plot(rma.varE_Alpha_EX.fit, AlphaHex_EX, main.title = paste0("Forest Plot - HEXACO EX --- I2: ", round(rma.varE_Alpha_EX.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_EX, pE_Alpha_EX)
pT_Alpha_AG <- my_forest_plot(rma.varT_Alpha_AG.fit, AlphaHex_AG, main.title = paste0("Forest Plot - HEXACO AG --- I2: ", round(rma.varT_Alpha_AG.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_AG <- my_forest_plot(rma.varE_Alpha_AG.fit, AlphaHex_AG, main.title = paste0("Forest Plot - HEXACO AG --- I2: ", round(rma.varE_Alpha_AG.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_AG, pE_Alpha_AG)
pT_Alpha_CO <- my_forest_plot(rma.varT_Alpha_CO.fit, AlphaHex_CO, main.title = paste0("Forest Plot - HEXACO CO --- I2: ", round(rma.varT_Alpha_CO.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_CO <- my_forest_plot(rma.varE_Alpha_CO.fit, AlphaHex_CO, main.title = paste0("Forest Plot - HEXACO CO --- I2: ", round(rma.varE_Alpha_CO.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_CO, pE_Alpha_CO)
pT_Alpha_OX <- my_forest_plot(rma.varT_Alpha_OX.fit, AlphaHex_OX, main.title = paste0("Forest Plot - HEXACO OX --- I2: ", round(rma.varT_Alpha_OX.fit$I2, 2)), x.lab = "Est. True Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
pE_Alpha_OX <- my_forest_plot(rma.varE_Alpha_OX.fit, AlphaHex_OX, main.title = paste0("Forest Plot - HEXACO OX --- I2: ", round(rma.varE_Alpha_OX.fit$I2, 2)), x.lab = "Est. Error Variance (Alpha)", ci.lvl = .975, CI.display = TRUE)
gridExtra::grid.arrange(pT_Alpha_OX, pE_Alpha_OX)
dev.off()
