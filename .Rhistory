comp_lab <- apply(comp_t, MARGIN = 1, FUN = function(x){
ifelse(length(names(x)[which(x == max(x))]) == 1 , names(x)[which(x == max(x))], "Other")
})
table(comp_lab)
comp_lab_r <- ifelse(comp_lab == "course credit", "Course Credit", "Other")
table(comp_lab_r)
# gender
sex <- sapply(as.matrix(unique(pc_df$source)), FUN = function(x){
gen <- pc_df$gender[which(pc_df$source == x)]
gen_01 <- ifelse(gen == "female", 1, 0)
mean(gen_01, na.rm = TRUE)
})
# age
mean_age <- sapply(as.matrix(unique(pc_df$source)), FUN = function(x){
age <- pc_df$age[which(pc_df$source == x)]
mean(age, na.rm = TRUE)
})
sd_age <- sapply(as.matrix(unique(pc_df$source)), FUN = function(x){
age <- pc_df$age[which(pc_df$source == x)]
sd(age, na.rm = TRUE)
})
# major
# maj <- sapply(as.matrix(unique(pc_df$source)), FUN = function(x){
#   table(pc_df$major[which(pc_df$source == x)])
# })
cond <- sapply(as.matrix(unique(pc_df$source)), FUN = function(x){
ifelse(grepl("no cheat", x), "no cheat", "cheat")
})
Reg_prep <- data.frame(lang = lang_lab_r,
comp = comp_lab_r,
sex = sex,
#                      major = maj,
mean_age = mean_age,
cond = cond,
source = labs_in_data[labs_in_data %in% labs_in_paper])
Reg_prep
unique(pc_df$source)
Reg_prep <- data.frame(lang = lang_lab_r,
comp = comp_lab_r,
sex = sex,
#                      major = maj,
mean_age = mean_age,
cond = cond,
source = unique(pc_df$source))
Reg_prep
write.csv(Reg_prep, here("Meta-Regression/meta_regression_dat_HEXACO.csv"), row.names = FALSE)
### Reliability Generalization HEXACO | Big Five TIPI ###
## 08/03/2022
###################################################################################################
# This script is used for meta-analysis of the reliability estimates generated previously.        #
###################################################################################################
# library loading and installing as necessary
# relevant R packages
packages <- c("metafor", "tidyverse", "here", "data.table", "lavaan")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("ReliabilityFunctions_RG.R"))
# only run if you wish to recompute the reliability estimates!
# currently does not work! Produces errors, while running script directly does not (unclear why)
#source(here("Generalization_Initialization_HEXACO.R"))
source(here("Loading_Estimates_HEXACO.R"))
# fitting random-effects meta-analysis to estimates of reliability using Cronbach's alpha & McDonald's omega
alpha.rma.fit_HH <- rel_rma(AlphaHex_HH)
omega.rma.fit_HH <- rel_rma(OmegaHex_HH)
Bonett_alpha.rma.fit_HH <- rel_rma(BonettAlphaHex_HH)
Bonett_omega.rma.fit_HH <- rel_rma(BonettOmegaHex_HH)
alpha.rma.fit_EM <- rel_rma(AlphaHex_EM)
omega.rma.fit_EM <- rel_rma(OmegaHex_EM)
Bonett_alpha.rma.fit_EM <- rel_rma(BonettAlphaHex_EM)
Bonett_omega.rma.fit_EM <- rel_rma(BonettOmegaHex_EM)
alpha.rma.fit_EX <- rel_rma(AlphaHex_EX)
omega.rma.fit_EX <- rel_rma(OmegaHex_EX)
Bonett_alpha.rma.fit_EX <- rel_rma(BonettAlphaHex_EX)
Bonett_omega.rma.fit_EX <- rel_rma(BonettOmegaHex_EX)
alpha.rma.fit_AG <- rel_rma(AlphaHex_AG)
omega.rma.fit_AG <- rel_rma(OmegaHex_AG)
Bonett_alpha.rma.fit_AG <- rel_rma(BonettAlphaHex_AG)
Bonett_omega.rma.fit_AG <- rel_rma(BonettOmegaHex_AG)
alpha.rma.fit_CO <- rel_rma(AlphaHex_CO)
omega.rma.fit_CO <- rel_rma(OmegaHex_CO)
Bonett_alpha.rma.fit_CO <- rel_rma(BonettAlphaHex_CO)
Bonett_omega.rma.fit_CO <- rel_rma(BonettOmegaHex_CO)
alpha.rma.fit_OX <- rel_rma(AlphaHex_OX)
omega.rma.fit_OX <- rel_rma(OmegaHex_OX)
Bonett_alpha.rma.fit_OX <- rel_rma(BonettAlphaHex_OX)
Bonett_omega.rma.fit_OX <- rel_rma(BonettOmegaHex_OX)
my_forest_plot(alpha.rma.fit_HH, AlphaHex_HH, main.title = "Forest Plot - HEXACO Honesty-Humility \n\ Item-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_HH, OmegaHex_HH, main.title = "Forest Plot - HEXACO Honesty-Humility \n\ Item-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_HH, BonettAlphaHex_HH, main.title = "Forest Plot - HEXACO Honesty-Humility \n\ Item-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_HH, BonettOmegaHex_HH, main.title = "Forest Plot - HEXACO Honesty-Humility \n\ Item-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
my_forest_plot(alpha.rma.fit_EM, AlphaHex_EM, main.title = "Forest Plot - HEXACO Emotionality \n\ Item-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_EM, OmegaHex_EM, main.title = "Forest Plot - HEXACO Emotionality \n\ Item-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_EM, BonettAlphaHex_EM, main.title = "Forest Plot - HEXACO Emotionality \n\ Item-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_EM, BonettOmegaHex_EM, main.title = "Forest Plot - HEXACO Emotionality \n\ Item-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
my_forest_plot(alpha.rma.fit_EX, AlphaHex_EX, main.title = "Forest Plot - HEXACO Extraversion \n\ Item-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_EX, OmegaHex_EX, main.title = "Forest Plot - HEXACO Extraversion \n\ Item-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_EX, BonettAlphaHex_EX, main.title = "Forest Plot - HEXACO Extraversion \n\ Item-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_EX, BonettOmegaHex_EX, main.title = "Forest Plot - HEXACO Extraversion \n\ Item-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
my_forest_plot(alpha.rma.fit_AG, AlphaHex_AG, main.title = "Forest Plot - HEXACO Agreeableness \n\ Item-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_AG, OmegaHex_AG, main.title = "Forest Plot - HEXACO Agreeableness \n\ Item-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_AG, BonettAlphaHex_AG, main.title = "Forest Plot - HEXACO Agreeableness \n\ Item-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_AG, BonettOmegaHex_AG, main.title = "Forest Plot - HEXACO Agreeableness \n\ Item-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
my_forest_plot(alpha.rma.fit_CO, AlphaHex_CO, main.title = "Forest Plot - HEXACO Conscientiousness \n\ Item-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_CO, OmegaHex_CO, main.title = "Forest Plot - HEXACO Conscientiousness \n\ Item-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_CO, BonettAlphaHex_CO, main.title = "Forest Plot - HEXACO Conscientiousness \n\ Item-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_CO, BonettOmegaHex_CO, main.title = "Forest Plot - HEXACO Conscientiousness \n\ Item-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
my_forest_plot(alpha.rma.fit_OX, AlphaHex_OX, main.title = "Forest Plot - HEXACO Openness to Experience \n\ Item-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_OX, OmegaHex_OX, main.title = "Forest Plot - HEXACO Openness to Experience \n\ Item-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_OX, BonettAlphaHex_OX, main.title = "Forest Plot - HEXACO Openness to Experience \n\ Item-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_OX, BonettOmegaHex_OX, main.title = "Forest Plot - HEXACO Openness to Experience \n\ Item-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
Reg_prep <- read.csv(here("Meta-Regression/meta_regression_dat_HEXACO.csv"))
Reg_prep
merge(AlphaHex_HH, Reg_prep, by = "source")
rel_rma.reg_hex <- function(df){
rma(yi = reliability, sei = StandardError,
mods = ~ lang + comp + sex + mean_age + cond,
data = df)
}
rel_rma.reg_hex(merge(AlphaHex_HH, Reg_prep, by = "source"))
reg.alpha.rma.fit_HH <- rel_rma.reg_hex(merge(AlphaHex_HH, Reg_prep, by = "source"))
reg.omega.rma.fit_HH <- rel_rma.reg_hex(merge(OmegaHex_HH, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_HH <- rel_rma.reg_hex(merge(BonettAlphaHex_HH, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_HH <- rel_rma.reg_hex(merge(BonettOmegaHex_HH, Reg_prep, by = "source"))
reg.alpha.rma.fit_HH
reg.omega.rma.fit_HH
reg.Bonett_alpha.rma.fit_HH
reg.Bonett_omega.rma.fit_HH
reg.alpha.rma.fit_EM <- rel_rma.reg_hex(merge(AlphaHex_EM, Reg_prep, by = "source"))
reg.omega.rma.fit_EM <- rel_rma.reg_hex(merge(OmegaHex_EM, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_EM <- rel_rma.reg_hex(merge(BonettAlphaHex_EM, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_EM <- rel_rma.reg_hex(merge(BonettOmegaHex_EM, Reg_prep, by = "source"))
reg.alpha.rma.fit_EM
reg.omega.rma.fit_EM
reg.Bonett_alpha.rma.fit_EM
reg.Bonett_omega.rma.fit_EM
reg.alpha.rma.fit_EX <- rel_rma.reg_hex(merge(AlphaHex_EX, Reg_prep, by = "source"))
reg.omega.rma.fit_EX <- rel_rma.reg_hex(merge(OmegaHex_EX, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_EX <- rel_rma.reg_hex(merge(BonettAlphaHex_EX, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_EX <- rel_rma.reg_hex(merge(BonettOmegaHex_EX, Reg_prep, by = "source"))
reg.alpha.rma.fit_EX
reg.omega.rma.fit_EX
reg.alpha.rma.fit_AG <- rel_rma.reg_hex(merge(AlphaHex_AG, Reg_prep, by = "source"))
reg.omega.rma.fit_AG <- rel_rma.reg_hex(merge(OmegaHex_AG, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_AG <- rel_rma.reg_hex(merge(BonettAlphaHex_AG, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_AG <- rel_rma.reg_hex(merge(BonettOmegaHex_AG, Reg_prep, by = "source"))
reg.alpha.rma.fit_AG
reg.alpha.rma.fit_CO <- rel_rma.reg_hex(merge(AlphaHex_CO, Reg_prep, by = "source"))
reg.omega.rma.fit_CO <- rel_rma.reg_hex(merge(OmegaHex_CO, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_CO <- rel_rma.reg_hex(merge(BonettAlphaHex_CO, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_CO <- rel_rma.reg_hex(merge(BonettOmegaHex_CO, Reg_prep, by = "source"))
reg.alpha.rma.fit_CO
reg.Bonett_alpha.rma.fit_CO
reg.alpha.rma.fit_OX <- rel_rma.reg_hex(merge(AlphaHex_OX, Reg_prep, by = "source"))
reg.omega.rma.fit_OX <- rel_rma.reg_hex(merge(OmegaHex_OX, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_OX <- rel_rma.reg_hex(merge(BonettAlphaHex_OX, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_OX <- rel_rma.reg_hex(merge(BonettOmegaHex_OX, Reg_prep, by = "source"))
reg.alpha.rma.fit_OX
reg.Bonett_alpha.rma.fit_OX
alpha.rma.fit_facets_HH <- rel_rma(AlphaHex_facets_HH)
omega.rma.fit_facets_HH <- rel_rma(OmegaHex_facets_HH)
Bonett_alpha.rma.fit_facets_HH <- rel_rma(BonettAlphaHex_facets_HH)
Bonett_omega.rma.fit_facets_HH <- rel_rma(BonettOmegaHex_facets_HH)
alpha.rma.fit_facets_EM <- rel_rma(AlphaHex_facets_EM)
omega.rma.fit_facets_EM <- rel_rma(OmegaHex_facets_EM)
Bonett_alpha.rma.fit_facets_EM <- rel_rma(BonettAlphaHex_facets_EM)
Bonett_omega.rma.fit_facets_EM <- rel_rma(BonettOmegaHex_facets_EM)
alpha.rma.fit_facets_EX <- rel_rma(AlphaHex_facets_EX)
omega.rma.fit_facets_EX <- rel_rma(OmegaHex_facets_EX)
Bonett_alpha.rma.fit_facets_EX <- rel_rma(BonettAlphaHex_facets_EX)
Bonett_omega.rma.fit_facets_EX <- rel_rma(BonettOmegaHex_facets_EX)
alpha.rma.fit_facets_AG <- rel_rma(AlphaHex_facets_AG)
omega.rma.fit_facets_AG <- rel_rma(OmegaHex_facets_AG)
Bonett_alpha.rma.fit_facets_AG <- rel_rma(BonettAlphaHex_facets_AG)
Bonett_omega.rma.fit_facets_AG <- rel_rma(BonettOmegaHex_facets_AG)
alpha.rma.fit_facets_CO <- rel_rma(AlphaHex_facets_CO)
omega.rma.fit_facets_CO <- rel_rma(OmegaHex_facets_CO)
Bonett_alpha.rma.fit_facets_CO <- rel_rma(BonettAlphaHex_facets_CO)
Bonett_omega.rma.fit_facets_CO <- rel_rma(BonettOmegaHex_facets_CO)
alpha.rma.fit_facets_OX <- rel_rma(AlphaHex_facets_OX)
omega.rma.fit_facets_OX <- rel_rma(OmegaHex_facets_OX)
Bonett_alpha.rma.fit_facets_OX <- rel_rma(BonettAlphaHex_facets_OX)
Bonett_omega.rma.fit_facets_OX <- rel_rma(BonettOmegaHex_facets_OX)
my_forest_plot(alpha.rma.fit_facets_HH, AlphaHex_facets_HH, main.title = "Forest Plot - HEXACO Honesty-Humility \n\ Facet-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_facets_HH, OmegaHex_facets_HH, main.title = "Forest Plot - HEXACO Honesty-Humility \n\ Facet-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_facets_HH, BonettAlphaHex_facets_HH, main.title = "Forest Plot - HEXACO Honesty-Humility \n\ Facet-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_facets_HH, BonettOmegaHex_facets_HH, main.title = "Forest Plot - HEXACO Honesty-Humility \n\ Facet-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
my_forest_plot(alpha.rma.fit_facets_EM, AlphaHex_facets_EM, main.title = "Forest Plot - HEXACO Emotionality \n\ Facet-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_facets_EM, OmegaHex_facets_EM, main.title = "Forest Plot - HEXACO Emotionality \n\ Facet-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_facets_EM, BonettAlphaHex_facets_EM, main.title = "Forest Plot - HEXACO Emotionality \n\ Facet-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_facets_EM, BonettOmegaHex_facets_EM, main.title = "Forest Plot - HEXACO Emotionality \n\ Facet-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
my_forest_plot(alpha.rma.fit_facets_EX, AlphaHex_facets_EX, main.title = "Forest Plot - HEXACO Extraversion \n\ Facet-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_facets_EX, OmegaHex_facets_EX, main.title = "Forest Plot - HEXACO Extraversion \n\ Facet-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_facets_EX, BonettAlphaHex_facets_EX, main.title = "Forest Plot - HEXACO Extraversion \n\ Facet-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_facets_EX, BonettOmegaHex_facets_EX, main.title = "Forest Plot - HEXACO Extraversion \n\ Facet-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
my_forest_plot(alpha.rma.fit_facets_AG, AlphaHex_facets_AG, main.title = "Forest Plot - HEXACO Agreeableness \n\ Facet-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_facets_AG, OmegaHex_facets_AG, main.title = "Forest Plot - HEXACO Agreeableness \n\ Facet-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_facets_AG, BonettAlphaHex_facets_AG, main.title = "Forest Plot - HEXACO Agreeableness \n\ Facet-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_facets_AG, BonettOmegaHex_facets_AG, main.title = "Forest Plot - HEXACO Agreeableness \n\ Facet-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
my_forest_plot(alpha.rma.fit_facets_CO, AlphaHex_facets_CO, main.title = "Forest Plot - HEXACO Conscientiousness \n\ Facet-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_facets_CO, OmegaHex_facets_CO, main.title = "Forest Plot - HEXACO Conscientiousness \n\ Facet-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_facets_CO, BonettAlphaHex_facets_CO, main.title = "Forest Plot - HEXACO Conscientiousness \n\ Facet-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_facets_CO, BonettOmegaHex_facets_CO, main.title = "Forest Plot - HEXACO Conscientiousness \n\ Facet-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
my_forest_plot(alpha.rma.fit_facets_OX, AlphaHex_facets_OX, main.title = "Forest Plot - HEXACO Openness to Experience \n\ Facet-Level",
x.lab = "Cronbach's Alpha", CI.display = TRUE)
my_forest_plot(omega.rma.fit_facets_OX, OmegaHex_facets_OX, main.title = "Forest Plot - HEXACO Openness to Experience \n\ Facet-Level",
x.lab = "McDonald's Omega", CI.display = TRUE)
my_forest_plot(Bonett_alpha.rma.fit_facets_OX, BonettAlphaHex_facets_OX, main.title = "Forest Plot - HEXACO Openness to Experience \n\ Facet-Level",
x.lab = "Cronbach's Alpha Bonett-transformed", CI.display = TRUE)
my_forest_plot(Bonett_omega.rma.fit_facets_OX, BonettOmegaHex_facets_OX, main.title = "Forest Plot - HEXACO Openness to Experience \n\ Facet-Level",
x.lab = "McDonald's Omega Bonett-transformed", CI.display = TRUE)
Reg_prep <- read.csv(here("Meta-Regression/meta_regression_dat_HEXACO.csv"))
reg.alpha.rma.fit_facets_HH <- rel_rma.reg_hex(merge(AlphaHex_facets_HH, Reg_prep, by = "source"))
reg.alpha.rma.fit_facets_HH
reg.Bonett_alpha.rma.fit_facets_HH
reg.Bonett_alpha.rma.fit_facets_HH <- rel_rma.reg_hex(merge(BonettAlphaHex_facets_HH, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_facets_HH
reg.alpha.rma.fit_facets_EM <- rel_rma.reg_hex(merge(AlphaHex_facets_EM, Reg_prep, by = "source"))
reg.omega.rma.fit_facets_EM <- rel_rma.reg_hex(merge(OmegaHex_facets_EM, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_facets_EM <- rel_rma.reg_hex(merge(BonettAlphaHex_facets_EM, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_facets_EM
reg.Bonett_omega.rma.fit_facets_EM <- rel_rma.reg_hex(merge(BonettOmegaHex_facets_EM, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_facets_EM
reg.alpha.rma.fit_facets_EX <- rel_rma.reg_hex(merge(AlphaHex_facets_EX, Reg_prep, by = "source"))
reg.omega.rma.fit_facets_EX <- rel_rma.reg_hex(merge(OmegaHex_facets_EX, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_facets_EX <- rel_rma.reg_hex(merge(BonettAlphaHex_facets_EX, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_facets_EX <- rel_rma.reg_hex(merge(BonettOmegaHex_facets_EX, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_facets_EX
reg.Bonett_omega.rma.fit_facets_EX
reg.alpha.rma.fit_facets_AG <- rel_rma.reg_hex(merge(AlphaHex_facets_AG, Reg_prep, by = "source"))
reg.omega.rma.fit_facets_AG <- rel_rma.reg_hex(merge(OmegaHex_facets_AG, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_facets_AG <- rel_rma.reg_hex(merge(BonettAlphaHex_facets_AG, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_facets_AG <- rel_rma.reg_hex(merge(BonettOmegaHex_facets_AG, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_facets_AG
reg.alpha.rma.fit_facets_CO <- rel_rma.reg_hex(merge(AlphaHex_facets_CO, Reg_prep, by = "source"))
reg.omega.rma.fit_facets_CO <- rel_rma.reg_hex(merge(OmegaHex_facets_CO, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_facets_CO <- rel_rma.reg_hex(merge(BonettAlphaHex_facets_CO, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_facets_CO <- rel_rma.reg_hex(merge(BonettOmegaHex_facets_CO, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_facets_CO
reg.alpha.rma.fit_facets_OX <- rel_rma.reg_hex(merge(AlphaHex_facets_OX, Reg_prep, by = "source"))
reg.omega.rma.fit_facets_OX <- rel_rma.reg_hex(merge(OmegaHex_facets_OX, Reg_prep, by = "source"))
reg.Bonett_alpha.rma.fit_facets_OX <- rel_rma.reg_hex(merge(BonettAlphaHex_facets_OX, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_facets_OX <- rel_rma.reg_hex(merge(BonettOmegaHex_facets_OX, Reg_prep, by = "source"))
reg.Bonett_omega.rma.fit_facets_OX
# Libraries/Pakete laden
library(ggplot2)
library(RColorBrewer) # RColorBrewer ist ein gutes Paket, um mehr Kontrolle bzgl der Farbenauswahl zu haben
# Wir laden ein neues "fake_data2.csv" set
data <- read.csv("C:/Users/beinhaul/Documents/Lehre/Stat_II_WT22/Übung 10/fake_data2.csv")
# Zunächst interessieren wir uns nur dafür, ob die Therapie mittels Rogers- oder CBT-Ansatz bessere
#  Ergebnisse liefert:
# Dafür visualisieren wir wieder.
ggplot(data, aes(x = Treatment, y = Treatment.Response)) +
geom_point(aes(colour = as.factor(Treatment))) +
labs(y = "Treatment.Response", x = "Treatment received",
title = "Scatterplot of Treatment Response and Treatment received") +
scale_colour_brewer(palette = "Set1", name = "Treatment", labels = c("Rogerian", "CBT")) # dies erlaubt mir
# Wir berechnen die mittlere Treatment-Response für je beide Gruppen:
#  der which()-Befehl hierdrin sorgt dafür, dass wir nur Beobachtungen zur Mittelwertsberechnung nutzen,
#  welche zu der jeweiligen Gruppe gehören.
mean_Rog <- mean(data$Treatment.Response[which(data$Treatment == 0)])
mean_CBT <- mean(data$Treatment.Response[which(data$Treatment == 1)])
# Wir können uns auch den Mittelwertsunterschied grafisch im Detail anschauen:
ggplot(data, aes(x = Treatment, y = Treatment.Response)) +
geom_point(aes(colour = as.factor(Treatment))) +
labs(y = "Treatment.Response", x = "Treatment received",                                   # hier bennen wir die
title = "Scatterplot of Treatment Response and Treatment received") +                 #  Achsen eigenständig
scale_colour_brewer(palette = "Set1", name = "Treatment", labels = c("Rogerian", "CBT")) + # Farbenauswahl
geom_smooth(method = "lm", se = FALSE) +                                                   # Regressionsgerade
annotate("point", x = 0, y = mean_Rog, shape = 4, size = 3, stroke=2) +                    # Mittelwert Rogers
annotate("point", x = 1, y = mean_CBT, shape = 4, size = 3, stroke=2) +                    # Mittelwert CBT
geom_label(aes(x = .1, y = 4.5), label = "mean = 5.122") +                                 # Text in Grafik
geom_label(aes(x = .9, y = 5), label = "mean = 5.831")                                     # Text in Grafik
# Wir führen ein Regressionsmodell durch, um Mittels der Treatment-Variable die Treatment-Response vorherzusagen.
fit1 <- lm("Treatment.Response ~ Treatment", data = data)
summary(fit1)
fit2 <- lm("Treatment.Response ~ Treatment + IQ", data = data)
summary(fit2)
fit2 <- lm("Treatment.Response ~ Treatment + IQ", data = data)
summary(fit2)
ggplot(data, aes(x = IQ, y = Treatment.Response, colour = as.factor(Treatment))) +
geom_point() +
labs(y = "Treatment Response", x = "IQ", title = "Scatterplot of Treatment Response and IQ") +
scale_colour_brewer(palette = "Set1", name = "Treatment", labels = c("Rogerian", "CBT"))
ggplot(data, aes(x = IQ, y = Treatment.Response)) +
geom_point(aes(colour = as.factor(Treatment))) +
labs(y = "Treatment Response", x = "IQ", title = "Scatterplot of Treatment Response and IQ") +
scale_colour_brewer(palette = "Set1", name = "Treatment", labels = c("Rogerian", "CBT")) +
annotate("point", y = mean_Rog, x = mean(data$IQ), fill = brewer.pal(3, name = "Set1")[1],
size = 3, pch = 23, stroke=2, color = "black") +
annotate("point", y = mean_CBT, x = mean(data$IQ), fill = brewer.pal(3, name = "Set1")[2],
size = 3, pch = 23, stroke=2, color = "black") +
geom_label(aes(x = 90, y = 6), label = "mean = 5.122") +
geom_label(aes(x = 90, y = 5), label = "mean = 5.831")
adj.mean_Rog <- .1119 + .2456 * 0 + .0493 * mean(data$IQ)
adj.mean_CBT <- .1119 + .2456 * 1 + .0493 * mean(data$IQ)
ggplot(data, aes(x = IQ, y = Treatment.Response)) +
geom_point(aes(colour = as.factor(Treatment))) +
labs(y = "Treatment Response", x = "IQ", title = "Scatterplot of Treatment Response and IQ") +
scale_colour_brewer(palette = "Set1", name = "Treatment", labels = c("Rogerian", "CBT")) +
annotate("point", y = adj.mean_Rog, x = mean(data$IQ), fill = brewer.pal(3, name = "Set1")[1],
size = 3, pch = 23, stroke=2, color = "black") +
annotate("point", y = adj.mean_CBT, x = mean(data$IQ), fill = brewer.pal(3, name = "Set1")[2],
size = 3, pch = 23, stroke=2, color = "black") +
geom_label(aes(x = 90, y = 5), label = "adj.mean = 5.352") +
geom_label(aes(x = 90, y = 6), label = "adj.mean = 5.597")
data2 <- read.csv("C:/Users/beinhaul/Documents/Lehre/Stat_II_WT22/Übung 10/fake_data3.csv")
ggplot(data2, aes(x = Treatment, y = Treatment.Response, colour = as.factor(Treatment))) +
geom_point() +
labs(y = "Treatment Response", x = "Treatment Received", title = "Scatterplot of Treatment Response and Treatment") +
scale_colour_discrete(name = "Treatment", labels = c("Rogerian", "CBT", "Psychoanalysis"))
mean_Rog <- mean(data2$Treatment.Response[which(data2$Treatment == 1)])
mean_CBT <- mean(data2$Treatment.Response[which(data2$Treatment == 2)])
mean_Psy <- mean(data2$Treatment.Response[which(data2$Treatment == 3)])
ggplot(data2, aes(x = as.factor(Treatment), y = Treatment.Response)) +
geom_point(aes(colour = as.factor(Treatment))) +
labs(y = "Well-Being", x = "Treatment Received", title = "Scatterplot of Well-Being and Group") +
scale_colour_discrete(name = "Treatment", labels = c("Rogerian", "CBT", "Psychoanalysis")) +
annotate("point", x = 1, y = mean_Rog, fill = brewer.pal(3, name = "Set1")[1],
size = 3, pch = 23, stroke=2, color = "black") +
annotate("point", x = 2, y = mean_CBT, fill = brewer.pal(3, name = "Set1")[2],
size = 3, pch = 23, stroke=2, color = "black") +
annotate("point", x = 3, y = mean_Psy, fill = brewer.pal(3, name = "Set1")[2],
size = 3, pch = 23, stroke=2, color = "black") +
geom_label(aes(x = 1, y = 4.55), label = "mean = 5.386") +
geom_label(aes(x = 2, y = 5), label = "mean = 5.889") +
geom_label(aes(x = 3, y = 3.1), label = "mean = 3.958")
data2$Dummy_CBT <- ifelse(data2$Treatment == 2, yes = 1, no = 0)
data2$Dummy_Psy <- ifelse(data2$Treatment == 3, yes = 1, no = 0)
fit3 <- lm("Treatment.Response ~ Dummy_CBT + Dummy_Psy", data = data2)
summary(fit3)
ggplot(data2, aes(x = IQ, y = Treatment.Response)) +
geom_point(aes(colour = as.factor(Treatment))) +
labs(y = "Treatment Response", x = "IQ", title = "Scatterplot of Treatment Response and IQ") +
scale_colour_brewer(palette = "Set1", name = "Treatment", labels = c("Rogerian", "CBT", "Psychoanalysis")) +
annotate("point", y = mean_Rog, x = mean(data2$IQ), fill = brewer.pal(3, name = "Set1")[1],
size = 3, pch = 23, stroke=2, color = "black") +
annotate("point", y = mean_CBT, x = mean(data2$IQ), fill = brewer.pal(3, name = "Set1")[2],
size = 3, pch = 23, stroke=2, color = "black") +
annotate("point", y = mean_Psy, x = mean(data2$IQ), fill = brewer.pal(3, name = "Set1")[3],
size = 3, pch = 23, stroke=2, color = "black") +
geom_label(aes(x = 90, y = 5.5), label = "mean = 5.386") +
geom_label(aes(x = 90, y = 6), label = "mean = 5.889") +
geom_label(aes(x = 90, y = 4), label = "mean = 3.958")
fit4 <- lm("Treatment.Response ~ Dummy_CBT + Dummy_Psy + IQ", data = data2)
summary(fit4)
adj.mean_Rog <- .6643 + .2427 * 0 - 1.7807 * 0 + .0486 * mean(data2$IQ)
adj.mean_CBT <- .6643 + .2427 * 1 - 1.7807 * 0 + .0486 * mean(data2$IQ)
adj.mean_Psy <- .6643 + .2427 * 0 - 1.7807 * 1 + .0486 * mean(data2$IQ)
ggplot(data2, aes(x = IQ, y = Treatment.Response)) +
geom_point(aes(colour = as.factor(Treatment))) +
labs(y = "Treatment Response", x = "IQ", title = "Scatterplot of Treatment Response and IQ") +
scale_colour_brewer(palette = "Set1", name = "Treatment", labels = c("Rogerian", "CBT", "Psychoanalysis")) +
annotate("point", y = adj.mean_Rog, x = mean(data2$IQ), fill = brewer.pal(3, name = "Set1")[1],
size = 3, pch = 23, stroke=2, color = "black") +
annotate("point", y = adj.mean_CBT, x = mean(data2$IQ), fill = brewer.pal(3, name = "Set1")[2],
size = 3, pch = 23, stroke=2, color = "black") +
annotate("point", y = adj.mean_Psy, x = mean(data2$IQ), fill = brewer.pal(3, name = "Set1")[3],
size = 3, pch = 23, stroke=2, color = "black") +
geom_label(aes(x = 85, y = 5.5), label = "adj.mean = 5.8592") +
geom_label(aes(x = 85, y = 6), label = "adj.mean = 6.1019") +
geom_label(aes(x = 85, y = 4), label = "adj.mean = 4.0785")
### Reliability Generalization HEXACO ###
## 08/03/2022
###################################################################################################
# This script is used purely for data cleaning, initial manipulation and generation of aggregates #
# and reliability coefficients                                                                    #
# Raw data won't be made public, as long as no agreement from authors is obtained.                #
###################################################################################################
# library loading and installing as necessary
# relevant R packages
packages <- c("metafor", "tidyverse", "here", "data.table", "lavaan")
# check, whether library already installed or not - install and load as needed:
apply(as.matrix(packages), MARGIN = 1, FUN = function(x) {
pkg_avail <- nzchar(system.file(package = x))   # check if library is installed on system
if(pkg_avail){
require(x, character.only = TRUE)             # load the library, if already installed
}else{
install.packages(x)                           # install the library, if missing
require(x, character.only = TRUE)             # load after installation
}
})
source(here("ReliabilityFunctions_RG.R"))
### HEXACO ###
### RRR10 cheating Priming - (Mazar, Amir & Ariely, 2008)
# Thankfully, for the RRR10 project, the data can be taken from a file directly:
pc_df <- as.data.frame(fread(here("Data/RRR10/raw_data_corrected_MAA.csv")))
# data <- data[which(data$age >= 18 & data$age <= 25),]
# retain observations only for participants eligible for analysis
pc_df <- pc_df[which(pc_df$inclusion == "inclusion both RRR" | pc_df$inclusion == "inclusion Mazar only"),] %>%
mutate(source = lab.name)
pc_df$source[which(pc_df$source == unique(pc_df$source)[8])] <- "Gonzalez-Iraizoz"
pc_df$source[which(pc_df$source == unique(pc_df$source)[16])] <- "Ozdogru"
# identify relevant labs for analsysis
labs_in_paper <- c("Laine", "klein Selle & Rozmann", "Aczel", "Ferreira-Santos", "Meijer", "Loschelder", "Wick", "Suchotzki",
"Sutan", "Vanpaemel", "Verschuere", "Wiggins", "Gonzalez-Iraizoz", "Koppel", "Birt", "McCarthy", "Evans",
"Holzmeister", "Ozdogru")
labs_in_data <- unique(pc_df$source)
# labs_in_data[8] <- "Gonzalez-Iraizoz"
# labs_in_data[16] <- "Ozdogru"
# remove labs from data, which we do not need for analysis
labs_excl <- labs_in_data[!labs_in_data %in% labs_in_paper]
pc_df <- pc_df[which(!pc_df$source %in% labs_excl),]
# include only participants in cheat condition (design was 2x2, cheat - no cheat x commandment - books)
# pc_df <- pc_df[which(pc_df$maz.cheat.cond == "cheat"),]
names(pc_df)
# retain only those columns, which are needed for subsequent analysis.
pc_df <- pc_df[,c(which(names(pc_df) %in% c("inclusion", "maz.prime.cond", "maz.cheat.cond", "source",
"compensation", "language", "major", "gender", "age")),
grep("^hex", names(pc_df)))]
pc_df <- mutate(pc_df, source = paste0(source, "_", maz.cheat.cond))
# recoding the hexaco items, that need recoding
for(i in grep("^hex", names(pc_df))){
pc_df[,i] <- as.integer(pc_df[,i])
}
# these are the numbers of the items, that need recoding
items_hex_recode <- c(30, 12, 60, 42, 24, 28, 53, 35, 41, 59, 28, 52, 10, 46, 9, 15, 57, 21, 26, 32, 14, 20, 44, 56, 1, 31, 49, 19, 55, 48)
names_items_hex_recode <- paste0("hex", items_hex_recode) # pasting "hex" and number gives the column names
names_items_hex_recode_R <- paste0(names_items_hex_recode, "_R") # adding _R for names of items, that are recoded
pc_df[,names_items_hex_recode_R] <- 6 - pc_df[,names_items_hex_recode] # recode items that need recoding
# identifying items for specific scales
# Honesty-Humility
items_hex_HH <- c(6, 30, 54, 12, 36, 60, 18, 42, 24, 48) # items in Honesty-Humility subscale
names_items_hex_HH <- ifelse(items_hex_HH %in% items_hex_recode, paste0("hex", items_hex_HH, "_R"), paste0("hex",items_hex_HH)) # did item need recoding?
pc_hex_items_HH <- which(names(pc_df) %in% names_items_hex_HH) # select all items from honesty-humility subscale, correctly coded
# Emotionality
items_hex_EM <- c(5, 29, 53, 11, 35, 17, 41, 23, 47, 59) # items in Emotionality subscale
names_items_hex_EM <- ifelse(items_hex_EM %in% items_hex_recode, paste0("hex", items_hex_EM, "_R"), paste0("hex",items_hex_EM)) # did item need recoding?
pc_hex_items_EM <- which(names(pc_df) %in% names_items_hex_EM) # select all items from Emotionality subscale, correctly coded
#Extraversion
items_hex_EX <- c(4, 28, 52, 10, 34, 58, 16, 40, 22, 46) # items in Extraversion subscale
names_items_hex_EX <- ifelse(items_hex_EX %in% items_hex_recode, paste0("hex", items_hex_EX, "_R"), paste0("hex",items_hex_EX)) # did item need recoding?
pc_hex_items_EX <- which(names(pc_df) %in% names_items_hex_EX) # select all items from Extraversion subscale, correctly coded
#Agreeableness
items_hex_AG <- c(3, 27, 9, 33, 51, 15, 39, 57, 21, 45) # items in Agreeableness subscale
names_items_hex_AG <- ifelse(items_hex_AG %in% items_hex_recode, paste0("hex", items_hex_AG, "_R"), paste0("hex",items_hex_AG)) # did item need recoding?
pc_hex_items_AG <- which(names(pc_df) %in% names_items_hex_AG) # select all items from Agreeableness subscale, correctly coded
#Conscientiousness
items_hex_CO <- c(2, 26, 8, 32, 14, 38, 50, 20, 44, 56) # items in Conscientiousness subscale
names_items_hex_CO <- ifelse(items_hex_CO %in% items_hex_recode, paste0("hex", items_hex_CO, "_R"), paste0("hex",items_hex_CO)) # did item need recoding?
pc_hex_items_CO <- which(names(pc_df) %in% names_items_hex_CO) # select all items from Conscientiousness subscale, correctly coded
#Openness to Experience
items_hex_OX <- c(1, 25, 7, 31, 13, 37, 49, 19, 43, 55) # items in Openness to Experience subscale
names_items_hex_OX <- ifelse(items_hex_OX %in% items_hex_recode, paste0("hex", items_hex_OX, "_R"), paste0("hex",items_hex_OX)) # did item need recoding?
pc_hex_items_OX <- which(names(pc_df) %in% names_items_hex_OX) # select all items from Openness to Experience subscale, correctly coded
rma_prep_pc <- rma_prep_function(pc_df %>%                            # generate mean aggregates at lab-level
mutate(DV = hex1,                  # no DV - selection is arbitrary
factor = maz.prime.cond),
factor.vec = c("commandments", "books"))
pc_df[,names_items_hex_HH]
pc_hex_items_EX
names_items_hex_HH
psych::alpha(pc_df[,names_items_hex_HH])
est_pc_hex_facets_full_HH <- psych::alpha(pc_df[,names_items_hex_HH])
est_pc_hex_facets_full_EM <- psych::alpha(pc_df[,names_items_hex_EM])
est_pc_hex_facets_full_EX <- psych::alpha(pc_df[,names_items_hex_EX])
est_pc_hex_facets_full_AG <- psych::alpha(pc_df[,names_items_hex_AG])
est_pc_hex_facets_full_CO <- psych::alpha(pc_df[,names_items_hex_CO])
est_pc_hex_facets_full_OX <- psych::alpha(pc_df[,names_items_hex_OX])
est_pc_hex_facets_full_OX
omega_pc_hex_facets_full_HH <- coefficientalpha::omega(pc_df[,names_items_hex_HH], se = T, varphi = 0, test = F)
